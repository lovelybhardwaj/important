# -*- coding: utf-8 -*-
"""trocr.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/121lC0ILbo6PX8AdW6dEj-Q2l-6f7ZteD
"""

import torch
import torchvision.transforms as transforms
import numpy as np
from transformers import TrOCRProcessor, VisionEncoderDecoderModel
from PIL import Image
import zipfile
import os

class ImageProcessor:
    def __init__(self):
        self.processor = TrOCRProcessor.from_pretrained("microsoft/trocr-base-handwritten")
        self.model_trocr = VisionEncoderDecoderModel.from_pretrained("microsoft/trocr-base-handwritten")
    def process_images(self):
        image_dict = {}
        cropped=[]
        for filename in os.listdir(r"C:\Users\Lovely Bhardwaj\OneDrive\Desktop\models\file\content\ALL_FILES\crop_images"):
            if filename.endswith('.jpg') or filename.endswith('.png'):
                img_path = os.path.join(r"C:\Users\Lovely Bhardwaj\OneDrive\Desktop\models\file\content\ALL_FILES\crop_images", filename)

                image = Image.open(img_path)
                cropped.append(img_path)
                width, height = image.size
                image = image.resize((width, 32))

                pixel_values = self.processor(image, return_tensors="pt").pixel_values
                generated_ids = self.model_trocr.generate(pixel_values)
                generated_text = self.processor.batch_decode(generated_ids, skip_special_tokens=True)[0]
                generated_text = generated_text[:-1]

                label = generated_text

                entry = {'image': image, 'label': label}
                if '1' in image_dict:
                    image_dict['1'].append(entry)
                else:
                    image_dict['1'] = [entry]

        return image_dict



